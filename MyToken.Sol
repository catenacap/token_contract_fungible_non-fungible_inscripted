// SPDX-License-Identifier: MIT
// 2013-2023 Catena Capital - Labs Division
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract MyToken is ERC20 {
    mapping(uint256 => string) public tokenInscriptions;
    mapping(uint256 => string) public tokenURLs;
    uint256 public totalTokens;

    mapping(address => bool) public blacklistedWallets;

    constructor() ERC20("My Token", "MTK") {
        totalTokens = 10;

        for (uint256 i = 1; i <= totalTokens; i++) {
            string memory inscription = getTokenInscription(i);
            string memory url = getTokenURL(i);
            tokenInscriptions[i] = inscription;
            tokenURLs[i] = url;
            _mint(msg.sender, 1);
        }
    }

    function getTokenInscription(uint256 tokenId) internal pure returns (string memory) {
        if (tokenId == 1) {
            return "Token_1_RIDT";
        } else if (tokenId == 2) {
            return "Token_2_RIDT";
        } else if (tokenId == 3) {
            return "Token_3_RIDT";
        } else if (tokenId == 4) {
            return "Token_4_RIDT";
        } else if (tokenId == 5) {
            return "Token_5_RIDT";
        } else if (tokenId == 6) {
            return "Token_6_RIDT";
        } else if (tokenId == 7) {
            return "Token_7_RIDT";
        } else if (tokenId == 8) {
            return "Token_8_RIDT";
        } else if (tokenId == 9) {
            return "Token_9_RIDT";
        } else if (tokenId == 10) {
            return "Token_10_RIDT";
        } else {
            return "";
        }
    }

    function getTokenURL(uint256 tokenId) internal pure returns (string memory) {
        if (tokenId == 1) {
            return "https://ai.catenacap.xyz/wp-content/uploads/inscription/1.avif";
        } else if (tokenId == 2) {
            return "https://ai.catenacap.xyz/wp-content/uploads/inscription/2.avif";
        } else if (tokenId == 3) {
            return "https://ai.catenacap.xyz/wp-content/uploads/inscription/3.avif";
        } else if (tokenId == 4) {
            return "https://ai.catenacap.xyz/wp-content/uploads/inscription/4.avif";
        } else if (tokenId == 5) {
            return "https://ai.catenacap.xyz/wp-content/uploads/inscription/5.avif";
        } else if (tokenId == 6) {
            return "https://ai.catenacap.xyz/wp-content/uploads/inscription/6.avif";
        } else if (tokenId == 7) {
            return "https://www.youtube.com/watch?v=VhA1dZXeao0";
        } else if (tokenId == 8) {
            return "https://www.fca.org.uk/news/speeches/risks-token-regulation";
        } else if (tokenId == 9) {
            return "https://www.thetimes.co.uk/article/chancellor-alistair-darling-on-brink-of-second-bailout-for-banks-n9l382mn62h";
        } else if (tokenId == 10) {
            return "https://www.youtube.com/shorts/IachOr82OqE";
        } else {
            return "";
        }
    }

    function getTokenIdByHolder(address holder) public view returns (uint256) {
        for (uint256 i = 1; i <= totalTokens; i++) {
            if (balanceOf(holder) >= i) {
                return i;
            }
        }
        revert("Token not found for the holder");
    }

    function updateInscription(uint256 tokenId, string memory newInscription) public {
        require(tokenId <= totalTokens, "Invalid token ID");
        tokenInscriptions[tokenId] = newInscription;
    }

    function updateURL(uint256 tokenId, string memory newURL) public {
        require(tokenId <= totalTokens, "Invalid token ID");
        tokenURLs[tokenId] = newURL;
    }

    function blacklistWallet(address wallet) public {
        blacklistedWallets[wallet] = true;
    }

    function burnToken(uint256 tokenId) public {
        require(tokenId <= totalTokens, "Invalid token ID");
        require(balanceOf(msg.sender) >= tokenId, "Insufficient balance");

        _burn(msg.sender, tokenId);
    }

    function issueNewToken(string memory inscription, string memory url) public {
        totalTokens++;
        tokenInscriptions[totalTokens] = inscription;
        tokenURLs[totalTokens] = url;
        _mint(msg.sender, 1);
    }
}
